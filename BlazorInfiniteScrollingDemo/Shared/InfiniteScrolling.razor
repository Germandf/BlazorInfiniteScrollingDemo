@typeparam TItem
@inject IIntersectionObserverService _observerService

<Virtualize Items="Items" Context="item">
	@if (Item is not null)
	{
		@Item(item)
	}
</Virtualize>
<span @ref="_targetElement" class="p-2"></span>
<LoadableComponent IsLoading="_isLoading" AdditionalCss="centered mt-2 mb-4">
	@if(Items is null || !Items.Any())
	{
		@NotFound
	}
	else if (RemainingItems)
	{
		<div class="text-center mt-2 mb-4">
			<button type="button" class="btn btn-dark" @onclick="async () => await OnIntersection()">Cargar más</button>
		</div>
	}
</LoadableComponent>

@code {

	[Parameter]
	public RenderFragment<TItem>? Item { get; set; }
	[Parameter]
	public RenderFragment? NotFound { get; set; }
	[Parameter]
	public ICollection<TItem>? Items { get; set; }
	[Parameter]
	public EventCallback OnLoadingItems { get; set; }
	[Parameter]
	public bool RemainingItems 
	{
		get { return _remainingItems; }
		set 
		{
			_remainingItems = value;
			if (!_remainingItems && _observer is not null)
				_observer.Unobserve(_targetElement);
		}
	}

	private ElementReference _targetElement { get; set; }
	private IntersectionObserver? _observer;
	private bool _remainingItems = true;
	private bool _isLoading = true;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
			_observer = await _observerService.Observe(_targetElement, async (entries) => await OnIntersection(entries));
	}

	private async Task OnIntersection(IList<IntersectionObserverEntry>? entries = null)
	{
		_isLoading = true;
		if (entries is null || entries.FirstOrDefault()!.IsIntersecting)
			await OnLoadingItems.InvokeAsync();
		_isLoading = false;
		StateHasChanged();
	}

}
