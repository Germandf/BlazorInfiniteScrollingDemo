@inject IJSRuntime _js
@typeparam TItem

<ul>
	<Virtualize Items="Items" Context="item">
		@ChildContent(item)
	</Virtualize>
	<span id="observerTarget"></span>
</ul>
@if(_isLoading)
{
	<div class="text-center my-4">
		<div class="spinner-border" role="status">
			<span class="sr-only"></span>
		</div>
	</div>
}

@code {

	[Parameter]
	public RenderFragment<TItem> ChildContent { get; set; }

	[Parameter]
	public string ObserverTargetId { get; set; }

	[Parameter]
	public EventCallback<bool> ObservableTargetReached { get; set; }

	[Parameter]
	public ICollection<TItem> Items { get; set; }

	private DotNetObjectReference<InfiniteScrolling<TItem>> _objectRef;
	private bool _isLoading = true;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_objectRef = DotNetObjectReference.Create(this);
			var initResult = await _js.InvokeAsync<dynamic>("Observer.Initialize", _objectRef, ObserverTargetId);
		}
	}

	[JSInvokable]
	public async Task OnIntersection()
	{
		_isLoading = true;
		await ObservableTargetReached.InvokeAsync(true);
		_isLoading = false;
	}

}
